# This is a basic workflow to help you get started with Actions

name: DRaw-cicd-workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events for every branch
  push:
    branches:
      - 'master'
      - 'main'
  pull_request:
    types: [ opened, reopened ]
    branches:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    name: Dub Tests
    strategy:
      matrix:
        os: [ubuntu-20.04] # [ubuntu-20.04, windows-latest, macOS-latest]
        dc: [dmd-latest]
        exclude:
          - { os: macOS-latest, dc: dmd-2.085.0 }

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install D Compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Install Dependencies
        run: |
          sudo apt-get install libgtkd-3-dev -y
          sudo apt-get install libgtksourceview-4-0 -y
          sudo apt-get install libgstreamer1.0-0 -y
          sudo apt-get install libgstreamer-plugins-bad1.0-dev -y
          echo MADE IT!!!!!

      # Runs a set of commands using the runners shell
      - name: Run a Multi-Line Script
        run: |
          echo Check dub and dmd versions:
          dub --version
          dmd --version
          pwd
          

      - name: Perform All Unit Tests
        working-directory: ./client-and-server
        run: dub run -c unittest

#      - name: Check All Docs
#        working-directory: ./client-and-server
#        run: sh ../../support/cicd_scripts/check_docs.sh .
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: Draw Docs
#          path: ./client-and-server/docs # or path/to/artifact
#          retention-days: 5

      ###
      ### Client:
      ###

      # Runs a single command using the runners shell
      - name: Check Client Formatting
        working-directory: ./client-and-server/client
        run: sh ../../support/cicd_scripts/check_format.sh .

      - name: Generate Client Coverage
        working-directory: ./client-and-server
        run: dub run :client -c cov

      - name: Check Client Coverage
        run: sh ./support/cicd_scripts/check_coverage.sh ./client-and-server/client

#      - uses: actions/upload-artifact@v3
#        with:
#          name: Client Coverage
#          path: ./client-and-server/client/coverage # or path/to/artifact
#          retention-days: 1

      - name: Build Client Release Deliverables
        working-directory: ./client-and-server
        run: |
          dub build :client
          ls ./client/bin

#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'macOS-latest'
#        with:
#          name: Client macOS Release Deliverable
#          path: ./client-and-server/client/bin/draw_client # or path/to/artifact
#          retention-days: 1
#
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'ubuntu-20.04'
#        with:
#          name: Client Ubuntu-20.04 Release Deliverable
#          path: ./client-and-server/client/bin/draw_client # or path/to/artifact
#          retention-days: 1
#
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'windows-latest'
#        with:
#          name: Client Windows Release Deliverable
#          path: ./client-and-server/client/bin/draw_client.exe # or path/to/artifact
#          retention-days: 1

      ###
      ### Server:
      ###

      - name: Check Server Formatting
        working-directory: ./client-and-server/server
        run: sh ../../support/cicd_scripts/check_format.sh .

      - name: Generate Server Coverage
        working-directory: ./client-and-server
        run: dub run :server -c cov

      - name: Check Server Coverage
        run: sh ./support/cicd_scripts/check_coverage.sh ./client-and-server/server

#      - uses: actions/upload-artifact@v3
#        with:
#          name: Server Coverage
#          path: ./client-and-server/server/coverage # or path/to/artifact
#          retention-days: 1

      - name: Build Server Release Deliverables
        working-directory: ./client-and-server
        run: |
          dub build :server
          ls ./server/bin

#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'macOS-latest'
#        with:
#          name: Server macOS Release Deliverable
#          path: ./client-and-server/server/bin/draw_server # or path/to/artifact
#          retention-days: 1
#
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'ubuntu-20.04'
#        with:
#          name: Server Ubuntu-20.04 Release Deliverable
#          path: ./client-and-server/server/bin/draw_server # or path/to/artifact
#          retention-days: 1
#
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'windows-latest'
#        with:
#          name: Server Windows Release Deliverable
#          path: ./client-and-server/server/bin/draw_server.exe # or path/to/artifact
#          retention-days: 1
